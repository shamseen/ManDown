{"Name":"Messaging Plugin for Xamarin and Windows","Id":3443,"Alias":"Xam.Plugins.Messaging","Description":"\r\nThe Messaging plugin makes it possible to make a phone call, send a sms or send an e-mail using the default messaging applications on the different mobile platforms.\r\n\r\n### API Usage\r\n\r\nThe Messaging Plugin makes use of `IEmailTask`, `ISmsTask` and `IPhoneCallTask` abstractions to send an e-mail, send a sms or make a phone call respectively.  These abstractions are defined within the `Plugin.Messaging.Abstractions` PCL library.  Platform specific implementations for these different abstractions are provided within a `Plugin.Messaging` library for the different platforms.\r\n\r\n```csharp\r\npublic interface IEmailTask\r\n{\r\n    bool CanSendEmail { get; }\r\n    bool CanSendEmailAttachments { get; }\r\n    bool CanSendEmailBodyAsHtml { get; }\r\n    void SendEmail(IEmailMessage email);\r\n    void SendEmail(string to, string subject, string message);\r\n}\r\n```\r\n\r\n```csharp\r\npublic interface ISmsTask\r\n{\r\n    bool CanSendSms { get; }\r\n    bool CanSendSmsInBackground { get; }\r\n    void SendSms(string recipient, string message);\r\n    void SendSmsInBackground(string recipient, string message);\r\n}\r\n```\r\n\r\n```csharp\r\npublic interface IPhoneCallTask\r\n{\r\n    bool CanMakePhoneCall { get; }\r\n    void MakePhoneCall(string number, string name = null);\r\n}\r\n```\r\n\r\n### Using the API \r\nThe messaging API\u0027s can be accessed on the different mobile platforms using the `CrossMessaging` singleton or `MessagingPlugin` static class.  Have a look at the `Plugin.Messaging.Samples.sln` for samples that illustrate using the API on the different platforms. Here are some snippets from the samples that illustrate how to access the API from within an `Activity`, `UIViewController` or Windows `Page`.  \r\n\r\n```csharp\r\n// Make Phone Call\r\nvar phoneDialer = CrossMessaging.Current.PhoneDialer;\r\nif (phoneDialer.CanMakePhoneCall) \r\n\tphoneDialer.MakePhoneCall(\"+27219333000\");\r\n\r\n// Send Sms\r\nvar smsMessenger = CrossMessaging.Current.SmsMessenger;\r\nif (smsMessenger.CanSendSms)\r\n   smsMessenger.SendSms(\"+27213894839493\", \"Well hello there from Xam.Messaging.Plugin\");\r\n\r\nvar emailMessenger = CrossMessaging.Current.EmailMessenger;\r\nif (emailMessenger.CanSendEmail)\r\n{\r\n    // Send simple e-mail to single receiver without attachments, bcc, cc etc.\r\n    emailMessenger.SendEmail(\"to.plugins@xamarin.com\", \"Xamarin Messaging Plugin\", \"Well hello there from Xam.Messaging.Plugin\");\r\n\r\n    // Alternatively use EmailBuilder fluent interface to construct more complex e-mail with multiple recipients, bcc, attachments etc. \r\n    var email = new EmailMessageBuilder()\r\n      .To(\"to.plugins@xamarin.com\")\r\n      .Cc(\"cc.plugins@xamarin.com\")\r\n      .Bcc(new[] { \"bcc1.plugins@xamarin.com\", \"bcc2.plugins@xamarin.com\" })\r\n      .Subject(\"Xamarin Messaging Plugin\")\r\n      .Body(\"Well hello there from Xam.Messaging.Plugin\")\r\n      .Build();\r\n\r\n    emailMessenger.SendEmail(email);\r\n}           \r\n```\r\n\r\n### Platform specific API\u0027s\r\n\r\nSending HTML e-mail and adding e-mail attachments are only supported on some platforms.  Use the ```IEmailTask.CanSendEmailAttachments``` and ```IEmailTask.CanSendEmailBodyAsHtml``` API\u0027s to test whether the feature is available for the platform in your PCL code.  \r\n\r\n#### HTML Content (iOS, Android) ###\r\n\r\nTo add HTML body content use ```EmailMessageBuilder.BodyAsHtml```.  \r\n\r\n```csharp\r\n// Construct HTML email (iOS and Android only)\r\nvar email = new EmailMessageBuilder()\r\n  .To(\"to.plugins@xamarin.com\")\r\n  .Subject(\"Xamarin Messaging Plugin\")\r\n  .BodyAsHtml(\"Well hello there from \u003ca\u003eXam.Messaging.Plugin\u003c/a\u003e\")\r\n  .Build();\r\n```\r\n\r\n#### Attachments (iOS, Android, UWP) ####\r\n\r\nTo add attachments, use the ```EmailMessageBuilder.WithAttachment``` overloads.  There are platform specific overloads that will allow you to attach a `Windows.Storage.IStorageFile` (**UWP**), `Java.IO.File` (**Android**) and `Foundation.NSUrl` (**iOS**).  Alternatively use the `WithAttachment(string, string)` overload to attach a file from within a PCL project. \r\n\r\n**Please note that on the Windows platform, attaching from the PCL only works for files contained within the ApplicationData due to the security restrictions of the platform**.  \r\n\r\n```csharp\r\n// Android\r\nFile file = new File(\"\u003cpath_to_file\u003e\");\r\nvar email = new EmailMessageBuilder()\r\n  .To(\"to.plugins@xamarin.com\")\r\n  .Subject(\"Xamarin Messaging Plugin\")\r\n  .Body(\"Well hello there from Xam.Messaging.Plugin\")\r\n  .WithAttachment(file);\r\n  .Build();\r\n\r\n// iOS\r\nNSUrl file = new NSUrl(\"\u003cpath_to_file\u003e\", false);\r\nvar email = new EmailMessageBuilder()\r\n  .To(\"to.plugins@xamarin.com\")\r\n  .Subject(\"Xamarin Messaging Plugin\")\r\n  .Body(\"Well hello there from Xam.Messaging.Plugin\")\r\n  .WithAttachment(file);\r\n  .Build();\r\n\r\n// PCL\r\nvar email = new EmailMessageBuilder()\r\n  .To(\"to.plugins@xamarin.com\")\r\n  .Subject(\"Xamarin Messaging Plugin\")\r\n  .Body(\"Well hello there from Xam.Messaging.Plugin\")\r\n  .WithAttachment(\"\u003cpath_to_picture\u003e\", \"image/jpeg\");\r\n  .Build();\r\n```\r\n\r\n#### Strict Mode (Android) ####\r\n\r\nBy default when sending an email using the `IEmailTask`, the plugin presents a list of all apps capable of handling the `Send` intent. This presents all kinds of apps that are not pure email apps.  If you wish to filter the list to only include email apps, you can change the plugin behavior by:\r\n\r\n```csharp\r\n// Available in Android project\r\nCrossMessaging.Current.Settings().Email.UseStrictMode = true;\r\n```\r\n\r\n**Unfortunately StrictMode does not seems to play nicely with adding attachments, so sending attachments using StrictMode is currently not supported**\r\n\r\n#### AutoDial (Android) ####\r\n\r\nBy default phoning a number using the `IPhoneCallTask`, the plugin only shows a phone dialer with the number populated. If you want the plugin to automatically dial the number, you can change the plugin behavior by:\r\n\r\n```csharp\r\n// Available in Android project\r\nCrossMessaging.Current.Settings().Phone.AutoDial = true;\r\n```\r\n\r\n**Please note using this settings requires the `android.permission.CALL_PHONE` added to the manifest file.**\r\n\r\n#### Send Background SMS (Android,UWP) ####\r\n\r\nBy default, when sending a SMS using the `ISmsTask.SendSms`, the plugin shows the default messaging user interface. Using the `ISmsTask.CanSendSmsInBackground` and `ISmsTask.SendSmsInBackground`, you can now send a sms silently in the background without showing the messaging user interface.\r\n\r\n```csharp\r\nvar smsMessenger = CrossMessaging.Current.SmsMessenger;\r\nif (smsMessenger.CanSendSmsInBackground)\r\n   smsMessenger.SendSmsInBackground(\"+27213894839\", \"Well hello there from Xam.Messaging.Plugin\");\r\n```\r\n\r\n**For Android, please add the `android.permission.SEND_SMS` permission to your Android manifest file.  For UWP, please add the `cellularMessaging` restricted capability to your package manifest file.  Also [read more about submitting an app using this restricted permission](https://docs.microsoft.com/en-us/windows/uwp/packaging/app-capability-declarations#special-and-restricted-capabilities) on the UWP platform.**","Version":"4.0.0.7","Summary":"Xamarin and Windows plugin to make phone call, send sms or send an e-mail.","QuickStart":"\r\nThe Messaging plugin makes it possible to make a phone call, send a sms or send an e-mail using the default messaging applications on the different mobile platforms.\r\n\r\n### API Usage\r\n\r\nThe Messaging Plugin makes use of `IEmailTask`, `ISmsTask` and `IPhoneCallTask` abstractions to send an e-mail, send a sms or make a phone call respectively.  These abstractions are defined within the `Plugin.Messaging.Abstractions` PCL library.  Platform specific implementations for these different abstractions are provided within a `Plugin.Messaging` library for the different platforms.\r\n\r\n```csharp\r\npublic interface IEmailTask\r\n{\r\n    bool CanSendEmail { get; }\r\n    bool CanSendEmailAttachments { get; }\r\n    bool CanSendEmailBodyAsHtml { get; }\r\n    void SendEmail(IEmailMessage email);\r\n    void SendEmail(string to, string subject, string message);\r\n}\r\n```\r\n\r\n```csharp\r\npublic interface ISmsTask\r\n{\r\n    bool CanSendSms { get; }\r\n    bool CanSendSmsInBackground { get; }\r\n    void SendSms(string recipient, string message);\r\n    void SendSmsInBackground(string recipient, string message);\r\n}\r\n```\r\n\r\n```csharp\r\npublic interface IPhoneCallTask\r\n{\r\n    bool CanMakePhoneCall { get; }\r\n    void MakePhoneCall(string number, string name = null);\r\n}\r\n```\r\n\r\n### Using the API \r\nThe messaging API\u0027s can be accessed on the different mobile platforms using the `CrossMessaging` singleton or `MessagingPlugin` static class.  Have a look at the `Plugin.Messaging.Samples.sln` for samples that illustrate using the API on the different platforms. Here are some snippets from the samples that illustrate how to access the API from within an `Activity`, `UIViewController` or Windows `Page`.  \r\n\r\n```csharp\r\n// Make Phone Call\r\nvar phoneDialer = CrossMessaging.Current.PhoneDialer;\r\nif (phoneDialer.CanMakePhoneCall) \r\n\tphoneDialer.MakePhoneCall(\"+27219333000\");\r\n\r\n// Send Sms\r\nvar smsMessenger = CrossMessaging.Current.SmsMessenger;\r\nif (smsMessenger.CanSendSms)\r\n   smsMessenger.SendSms(\"+27213894839493\", \"Well hello there from Xam.Messaging.Plugin\");\r\n\r\nvar emailMessenger = CrossMessaging.Current.EmailMessenger;\r\nif (emailMessenger.CanSendEmail)\r\n{\r\n    // Send simple e-mail to single receiver without attachments, bcc, cc etc.\r\n    emailMessenger.SendEmail(\"to.plugins@xamarin.com\", \"Xamarin Messaging Plugin\", \"Well hello there from Xam.Messaging.Plugin\");\r\n\r\n    // Alternatively use EmailBuilder fluent interface to construct more complex e-mail with multiple recipients, bcc, attachments etc. \r\n    var email = new EmailMessageBuilder()\r\n      .To(\"to.plugins@xamarin.com\")\r\n      .Cc(\"cc.plugins@xamarin.com\")\r\n      .Bcc(new[] { \"bcc1.plugins@xamarin.com\", \"bcc2.plugins@xamarin.com\" })\r\n      .Subject(\"Xamarin Messaging Plugin\")\r\n      .Body(\"Well hello there from Xam.Messaging.Plugin\")\r\n      .Build();\r\n\r\n    emailMessenger.SendEmail(email);\r\n}           \r\n```\r\n\r\n### Platform specific API\u0027s\r\n\r\nSending HTML e-mail and adding e-mail attachments are only supported on some platforms.  Use the ```IEmailTask.CanSendEmailAttachments``` and ```IEmailTask.CanSendEmailBodyAsHtml``` API\u0027s to test whether the feature is available for the platform in your PCL code.  \r\n\r\n#### HTML Content (iOS, Android) ###\r\n\r\nTo add HTML body content use ```EmailMessageBuilder.BodyAsHtml```.  \r\n\r\n```csharp\r\n// Construct HTML email (iOS and Android only)\r\nvar email = new EmailMessageBuilder()\r\n  .To(\"to.plugins@xamarin.com\")\r\n  .Subject(\"Xamarin Messaging Plugin\")\r\n  .BodyAsHtml(\"Well hello there from \u003ca\u003eXam.Messaging.Plugin\u003c/a\u003e\")\r\n  .Build();\r\n```\r\n\r\n#### Attachments (iOS, Android, UWP) ####\r\n\r\nTo add attachments, use the ```EmailMessageBuilder.WithAttachment``` overloads.  There are platform specific overloads that will allow you to attach a `Windows.Storage.IStorageFile` (**UWP**), `Java.IO.File` (**Android**) and `Foundation.NSUrl` (**iOS**).  Alternatively use the `WithAttachment(string, string)` overload to attach a file from within a PCL project. \r\n\r\n**Please note that on the Windows platform, attaching from the PCL only works for files contained within the ApplicationData due to the security restrictions of the platform**.  \r\n\r\n```csharp\r\n// Android\r\nFile file = new File(\"\u003cpath_to_file\u003e\");\r\nvar email = new EmailMessageBuilder()\r\n  .To(\"to.plugins@xamarin.com\")\r\n  .Subject(\"Xamarin Messaging Plugin\")\r\n  .Body(\"Well hello there from Xam.Messaging.Plugin\")\r\n  .WithAttachment(file);\r\n  .Build();\r\n\r\n// iOS\r\nNSUrl file = new NSUrl(\"\u003cpath_to_file\u003e\", false);\r\nvar email = new EmailMessageBuilder()\r\n  .To(\"to.plugins@xamarin.com\")\r\n  .Subject(\"Xamarin Messaging Plugin\")\r\n  .Body(\"Well hello there from Xam.Messaging.Plugin\")\r\n  .WithAttachment(file);\r\n  .Build();\r\n\r\n// PCL\r\nvar email = new EmailMessageBuilder()\r\n  .To(\"to.plugins@xamarin.com\")\r\n  .Subject(\"Xamarin Messaging Plugin\")\r\n  .Body(\"Well hello there from Xam.Messaging.Plugin\")\r\n  .WithAttachment(\"\u003cpath_to_picture\u003e\", \"image/jpeg\");\r\n  .Build();\r\n```\r\n\r\n#### Strict Mode (Android) ####\r\n\r\nBy default when sending an email using the `IEmailTask`, the plugin presents a list of all apps capable of handling the `Send` intent. This presents all kinds of apps that are not pure email apps.  If you wish to filter the list to only include email apps, you can change the plugin behavior by:\r\n\r\n```csharp\r\n// Available in Android project\r\nCrossMessaging.Current.Settings().Email.UseStrictMode = true;\r\n```\r\n\r\n**Unfortunately StrictMode does not seems to play nicely with adding attachments, so sending attachments using StrictMode is currently not supported**\r\n\r\n#### AutoDial (Android) ####\r\n\r\nBy default phoning a number using the `IPhoneCallTask`, the plugin only shows a phone dialer with the number populated. If you want the plugin to automatically dial the number, you can change the plugin behavior by:\r\n\r\n```csharp\r\n// Available in Android project\r\nCrossMessaging.Current.Settings().Phone.AutoDial = true;\r\n```\r\n\r\n**Please note using this settings requires the `android.permission.CALL_PHONE` added to the manifest file.**\r\n\r\n#### Send Background SMS (Android,UWP) ####\r\n\r\nBy default, when sending a SMS using the `ISmsTask.SendSms`, the plugin shows the default messaging user interface. Using the `ISmsTask.CanSendSmsInBackground` and `ISmsTask.SendSmsInBackground`, you can now send a sms silently in the background without showing the messaging user interface.\r\n\r\n```csharp\r\nvar smsMessenger = CrossMessaging.Current.SmsMessenger;\r\nif (smsMessenger.CanSendSmsInBackground)\r\n   smsMessenger.SendSmsInBackground(\"+27213894839\", \"Well hello there from Xam.Messaging.Plugin\");\r\n```\r\n\r\n**For Android, please add the `android.permission.SEND_SMS` permission to your Android manifest file.  For UWP, please add the `cellularMessaging` restricted capability to your package manifest file.  Also [read more about submitting an app using this restricted permission](https://docs.microsoft.com/en-us/windows/uwp/packaging/app-capability-declarations#special-and-restricted-capabilities) on the UWP platform.**","Hash":"300727432016e1a4a86d9361b1e2d992","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}